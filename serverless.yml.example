service: LaraBot

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  profile: default
  environment:
    PROVIDER_REGION: ${self:provider.region}
    # PENDING_ORDER_QUEUE:
    #   Ref: PendingOrdersQueue
    # PENDING_ORDER_QUEUE_NAME: PendingOrdersQueue
    # COMPLETED_ORDER_TABLE: CompletedOrderTable
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    # - Effect: "Allow"
    #   Action:
    #     - "sqs:SendMessage"
    #   Resource:
    #     - "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME_CONVERSATIONS_CONTEXT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME_CONSTANCES}"

functions:
  botApiGateway:
    handler: handlers.botApiGateway
    events:
      - http:
          method: post
          path: events/slack
      - http:
          method: post
          path: events/gchat
      - http:
          method: post
          path: events/msteams
  botEngine:
    handler: handlers.botEngine
    events:
      - http:
          method: post
          path: bot-engine
  # makeOrder:
  #   handler: functionsLegacy.makeOrder
  #   events:
  #     - http:
  #         method: post
  #         path: order
  # prepareOrder:
  #   handler: functionsLegacy.prepareOrder
  #   events:
  #     - sqs:
  #         arn:
  #           Fn::GetAtt:
  #             - PendingOrdersQueue
  #             - Arn
  #         batchSize: 1
  # sendOrder:
  #   handler: functionsLegacy.sendOrder
  #   events:
  #     - stream:
  #         type: dynamodb
  #         batchSize: 1
  #         startingPosition: LATEST
  #         arn:
  #           Fn::GetAtt:
  #             - CompletedOrdersTable
  #             - StreamArn
  # checkOrderState:
  #   handler: functionsLegacy.checkOrderState
  #   events:
  #     - http:
  #         method: get
  #         path: checkOrder/{orderId}


resources:
  Resources:
    # PendingOrdersQueue:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     QueueName: "${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"
    # CompletedOrdersTable:
    #   Type: "AWS::DynamoDB::Table"
    #   Properties:
    #     AttributeDefinitions:
    #     - AttributeName: "orderId"
    #       AttributeType: "S"
    #     KeySchema:
    #     - AttributeName: "orderId"
    #       KeyType: "HASH"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.COMPLETED_ORDER_TABLE}
    #     StreamSpecification:
    #       StreamViewType: NEW_IMAGE
    ConversationsContext:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "channelId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "channelId"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME_CONVERSATIONS_CONTEXT}
    Constances:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "configName"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "configName"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME_CONSTANCES}


plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin


custom:
  dotenv:
    required:
      file: true
    path: ./docker/local/app/.env
    basePath: ./
    logging: true
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
      - AWS_DEFAULT_OUTPUT