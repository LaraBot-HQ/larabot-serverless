service: LaraBot

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  profile: default
  stage: development
  environment:
    PROVIDER_REGION: ${self:provider.region}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    # - Effect: "Allow"
    #   Action:
    #     - "sqs:SendMessage"
    #   Resource:
    #     - "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME_CONVERSATIONS_CONTEXT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME_CONSTANCES}"

functions:
  botApiGateway:
    handler: handlers.botApiGateway
    events:
      - http:
          method: post
          path: events/slack
      - http:
          method: post
          path: events/hangouts
      - http:
          method: post
          path: events/msteams
  botEngine:
    handler: handlers.botEngine
    events:
      - http:
          method: post
          path: bot-engine


resources:
  Resources:
    ConversationsContext:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "userId"
          AttributeType: "S"
        - AttributeName: "channelId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "userId"
          KeyType: "HASH"
        - AttributeName: "channelId"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME_CONVERSATIONS_CONTEXT}
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    Constances:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "configName"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "configName"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_NAME_CONSTANCES}
        StreamSpecification:
          StreamViewType: NEW_IMAGE


plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin


custom:
  dotenv:
    required:
      file: true
    path: ./docker/local/app/.env
    basePath: ./
    logging: true
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_DEFAULT_REGION
      - AWS_DEFAULT_OUTPUT